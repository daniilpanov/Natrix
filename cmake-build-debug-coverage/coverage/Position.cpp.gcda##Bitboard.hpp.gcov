        -:    0:Source:/home/daniel/Projects/C++/Natrix/src/Engine/Base/PositionRepresentation/Bitboard.hpp
        -:    0:Graph:/home/daniel/Projects/C++/Natrix/cmake-build-debug-coverage/CMakeFiles/Natrix.dir/src/Engine/Base/PositionRepresentation/Position.cpp.gcno
        -:    0:Data:/home/daniel/Projects/C++/Natrix/cmake-build-debug-coverage/CMakeFiles/Natrix.dir/src/Engine/Base/PositionRepresentation/Position.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <iostream>
        -:    2:#include <cstdint>
        -:    3:#include <bit>
        -:    4:#include <array>
        -:    5:#include "../../../ANSI.hpp"
        -:    6:
        -:    7:
        -:    8:#pragma once
        -:    9:
        -:   10:
        -:   11:typedef uint64_t Bitboard;
        -:   12:
        -:   13:
        -:   14:namespace BitboardOperations {
   96502*:   15:    static constexpr void set_1(Bitboard &bb, uint8_t square) {
   96502*:   16:        bb = bb | (1ull << square);
    %%%%%:   16-block  0
call    0 never executed
    93012:   16-block  1
call    1 returned 93012
        7:   16-block  2
call    2 returned 7
     1858:   16-block  3
call    3 returned 1858
    %%%%%:   16-block  4
call    4 never executed
     1625:   16-block  5
call    5 returned 1625
    %%%%%:   16-block  6
call    6 never executed
    %%%%%:   16-block  7
call    7 never executed
    %%%%%:   16-block  8
call    8 never executed
    %%%%%:   16-block  9
call    9 never executed
        -:   17:    }
  105870*:   18:    static constexpr void set_0(Bitboard &bb, uint8_t square) {
  105870*:   19:        bb = bb & (~(1ull << square));
   102380:   19-block  0
call    0 returned 102380
        7:   19-block  1
call    1 returned 7
     1858:   19-block  2
call    2 returned 1858
    %%%%%:   19-block  3
call    3 never executed
     1625:   19-block  4
call    4 returned 1625
        -:   20:    }
        -:   21:
        -:   22:
  202372*:   23:    static constexpr bool get_bit(Bitboard bb, uint8_t square) {
  202372*:   24:        return (bb & (1ull << square));
   102380:   24-block  0
branch  0 taken 102380 (fallthrough)
branch  1 taken 0
    %%%%%:   24-block  1
branch  2 never executed
branch  3 never executed
branch  4 taken 93012 (fallthrough)
branch  5 taken 0
        7:   24-block  2
branch  6 taken 7 (fallthrough)
branch  7 taken 0
        7:   24-block  3
branch  8 taken 7 (fallthrough)
branch  9 taken 0
     1858:   24-block  4
branch 10 taken 1858 (fallthrough)
branch 11 taken 0
     1858:   24-block  5
branch 12 taken 1858 (fallthrough)
branch 13 taken 0
    %%%%%:   24-block  6
branch 14 never executed
branch 15 never executed
    %%%%%:   24-block  7
branch 16 never executed
branch 17 never executed
     1625:   24-block  8
branch 18 taken 1625 (fallthrough)
branch 19 taken 0
     1625:   24-block  9
branch 20 taken 1625 (fallthrough)
branch 21 taken 0
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
branch 28 never executed
branch 29 never executed
        -:   25:    }
        -:   26:
        -:   27:
        -:   28:    static void print(Bitboard bb) {
        -:   29:        std::cout << ANSI::Green;
        -:   30:
        -:   31:        for (int8_t y = 7; y >= 0; y = y - 1) {
        -:   32:            for (uint8_t x = 0; x < 8; x = x + 1) {
        -:   33:                std::cout << "|  ";
        -:   34:
        -:   35:                if (BitboardOperations::get_bit(bb, y * 8 + x)) std::cout << "1";
        -:   36:                else std::cout << "0";
        -:   37:
        -:   38:                std::cout << "  ";
        -:   39:            }
        -:   40:            std::cout << "|\n";
        -:   41:        }
        -:   42:
        -:   43:        std::cout << ANSI::End;
        -:   44:    }
        -:   45:
        -:   46:
        -:   47:    static constexpr uint8_t count_1(Bitboard bb) {
        -:   48:        return std::popcount(bb);
        -:   49:    }
        -:   50:
        -:   51:
        -:   52:    static constexpr std::array<uint8_t, 64> BitScanTable = {
        -:   53:            0, 47,  1, 56, 48, 27,  2, 60,
        -:   54:            57, 49, 41, 37, 28, 16,  3, 61,
        -:   55:            54, 58, 35, 52, 50, 42, 21, 44,
        -:   56:            38, 32, 29, 23, 17, 11,  4, 62,
        -:   57:            46, 55, 26, 59, 40, 36, 15, 53,
        -:   58:            34, 51, 20, 43, 31, 22, 10, 45,
        -:   59:            25, 39, 14, 33, 19, 30,  9, 24,
        -:   60:            13, 18,  8, 12,  7,  6,  5, 63
        -:   61:    };
        -:   62:
        -:   63:
        -:   64:    static constexpr uint8_t bsf(Bitboard bb) {
        -:   65:        /* Не используется специальные инструкции процессора для переносимости скомпилированного кода.
        -:   66:         * Тесты показали, что BSFR инструкции у Intel не дают ощутимой производительности по сравнению с оптимизированным подходом.
        -:   67:         * Ниже оставлен код, позволяющий использовать BSFR инструкции (при наличии).*/
        -:   68:
        -:   69:        // return __builtin_ctzll(bb);
        -:   70:
        -:   71:        return BitboardOperations::BitScanTable[((bb ^ (bb - 1)) * 0x03f79d71b4cb0a89) >> 58];
        -:   72:    }
        -:   73:    static constexpr uint8_t bsr(Bitboard bb) {
        -:   74:        // См. комментарий к функции выше.
        -:   75:
        -:   76:        // return 63 - __builtin_clzll(bb);
        -:   77:
        -:   78:        bb = bb | (bb >> 1);
        -:   79:        bb = bb | (bb >> 2);
        -:   80:        bb = bb | (bb >> 4);
        -:   81:        bb = bb | (bb >> 8);
        -:   82:        bb = bb | (bb >> 16);
        -:   83:        bb = bb | (bb >> 32);
        -:   84:
        -:   85:        return BitboardOperations::BitScanTable[(bb * 0x03f79d71b4cb0a89) >> 58];
        -:   86:    }
        -:   87:}
        -:   88:
        -:   89:
        -:   90:namespace BitboardRows {
        -:   91:    static constexpr std::array<Bitboard, 8> calc_rows() {
        -:   92:        std::array<Bitboard, 8> rows{};
        -:   93:
        -:   94:        for (uint8_t y = 0; y < 8; y = y + 1) {
        -:   95:            for (uint8_t x = 0; x < 8; x = x + 1) BitboardOperations::set_1(rows[y], y * 8 + x);
        -:   96:        }
        -:   97:
        -:   98:        return rows;
        -:   99:    }
        -:  100:
        -:  101:
        -:  102:    static constexpr std::array<Bitboard, 8> Rows = BitboardRows::calc_rows();
        -:  103:
        -:  104:
        -:  105:    static constexpr std::array<Bitboard, 8> calc_inversion_rows() {
        -:  106:        std::array<Bitboard, 8> inversion_rows{};
        -:  107:
        -:  108:        for (uint8_t i = 0; i < 8; i = i + 1) inversion_rows[i] = ~Rows[i];
        -:  109:
        -:  110:        return inversion_rows;
        -:  111:    }
        -:  112:
        -:  113:
        -:  114:    static constexpr std::array<Bitboard, 8> InversionRows = BitboardRows::calc_inversion_rows();
        -:  115:}
        -:  116:
        -:  117:
        -:  118:namespace BitboardColumns {
        -:  119:    static constexpr std::array<Bitboard, 8> calc_columns() {
        -:  120:        std::array<Bitboard, 8> columns{};
        -:  121:
        -:  122:        for (uint8_t x = 0; x < 8; x = x + 1) {
        -:  123:            for (uint8_t y = 0; y < 8; y = y + 1) BitboardOperations::set_1(columns[x], y * 8 + x);
        -:  124:        }
        -:  125:
        -:  126:        return columns;
        -:  127:    }
        -:  128:
        -:  129:
        -:  130:    static constexpr std::array<Bitboard, 8> Columns = BitboardColumns::calc_columns();
        -:  131:
        -:  132:
        -:  133:    static constexpr std::array<Bitboard, 8> calc_inversion_columns() {
        -:  134:        std::array<Bitboard, 8> inversion_columns{};
        -:  135:
        -:  136:        for (uint8_t i = 0; i < 8; i = i + 1) inversion_columns[i] = ~Columns[i];
        -:  137:
        -:  138:        return inversion_columns;
        -:  139:    }
        -:  140:
        -:  141:
        -:  142:    static constexpr std::array<Bitboard, 8> InversionColumns = BitboardColumns::calc_inversion_columns();
        -:  143:}
