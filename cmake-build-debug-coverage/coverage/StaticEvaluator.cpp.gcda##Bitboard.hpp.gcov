        -:    0:Source:/home/daniel/Projects/C++/Natrix/src/Engine/Base/PositionRepresentation/Bitboard.hpp
        -:    0:Graph:/home/daniel/Projects/C++/Natrix/cmake-build-debug-coverage/CMakeFiles/Natrix.dir/src/Engine/AI/StaticEvaluator.cpp.gcno
        -:    0:Data:/home/daniel/Projects/C++/Natrix/cmake-build-debug-coverage/CMakeFiles/Natrix.dir/src/Engine/AI/StaticEvaluator.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <iostream>
        -:    2:#include <cstdint>
        -:    3:#include <bit>
        -:    4:#include <array>
        -:    5:#include "../../../ANSI.hpp"
        -:    6:
        -:    7:
        -:    8:#pragma once
        -:    9:
        -:   10:
        -:   11:typedef uint64_t Bitboard;
        -:   12:
        -:   13:
        -:   14:namespace BitboardOperations {
        -:   15:    static constexpr void set_1(Bitboard &bb, uint8_t square) {
        -:   16:        bb = bb | (1ull << square);
        -:   17:    }
    #####:   18:    static constexpr void set_0(Bitboard &bb, uint8_t square) {
    #####:   19:        bb = bb & (~(1ull << square));
    %%%%%:   19-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   19-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:   19-block  2
call    4 never executed
    %%%%%:   19-block  3
call    5 never executed
    %%%%%:   19-block  4
call    6 never executed
    %%%%%:   19-block  5
call    7 never executed
    %%%%%:   19-block  6
call    8 never executed
    %%%%%:   19-block  7
call    9 never executed
    %%%%%:   19-block  8
call   10 never executed
    %%%%%:   19-block  9
call   11 never executed
        -:   20:    }
        -:   21:
        -:   22:
        -:   23:    static constexpr bool get_bit(Bitboard bb, uint8_t square) {
        -:   24:        return (bb & (1ull << square));
        -:   25:    }
        -:   26:
        -:   27:
        -:   28:    static void print(Bitboard bb) {
        -:   29:        std::cout << ANSI::Green;
        -:   30:
        -:   31:        for (int8_t y = 7; y >= 0; y = y - 1) {
        -:   32:            for (uint8_t x = 0; x < 8; x = x + 1) {
        -:   33:                std::cout << "|  ";
        -:   34:
        -:   35:                if (BitboardOperations::get_bit(bb, y * 8 + x)) std::cout << "1";
        -:   36:                else std::cout << "0";
        -:   37:
        -:   38:                std::cout << "  ";
        -:   39:            }
        -:   40:            std::cout << "|\n";
        -:   41:        }
        -:   42:
        -:   43:        std::cout << ANSI::End;
        -:   44:    }
        -:   45:
        -:   46:
    #####:   47:    static constexpr uint8_t count_1(Bitboard bb) {
    %%%%%:   47-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   47-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:   47-block  2
branch  4 never executed
branch  5 never executed
    %%%%%:   47-block  3
branch  6 never executed
branch  7 never executed
    %%%%%:   47-block  4
branch  8 never executed
branch  9 never executed
    %%%%%:   47-block  5
branch 10 never executed
branch 11 never executed
    %%%%%:   47-block  6
branch 12 never executed
branch 13 never executed
    %%%%%:   47-block  7
branch 14 never executed
branch 15 never executed
    %%%%%:   47-block  8
branch 16 never executed
branch 17 never executed
    %%%%%:   47-block  9
branch 18 never executed
branch 19 never executed
    %%%%%:   47-block 10
branch 20 never executed
branch 21 never executed
    #####:   48:        return std::popcount(bb);
    %%%%%:   48-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   48-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:   48-block  2
branch  4 never executed
branch  5 never executed
    %%%%%:   48-block  3
branch  6 never executed
branch  7 never executed
    %%%%%:   48-block  4
branch  8 never executed
branch  9 never executed
    %%%%%:   48-block  5
branch 10 never executed
branch 11 never executed
    %%%%%:   48-block  6
branch 12 never executed
branch 13 never executed
    %%%%%:   48-block  7
    %%%%%:   48-block  8
branch 14 never executed
branch 15 never executed
    %%%%%:   48-block  9
branch 16 never executed
branch 17 never executed
    %%%%%:   48-block 10
branch 18 never executed
branch 19 never executed
    %%%%%:   48-block 11
branch 20 never executed
branch 21 never executed
    %%%%%:   48-block 12
branch 22 never executed
branch 23 never executed
    %%%%%:   48-block 13
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
    %%%%%:   48-block 14
branch 28 never executed
branch 29 never executed
    %%%%%:   48-block 15
branch 30 never executed
branch 31 never executed
    %%%%%:   48-block 16
branch 32 never executed
branch 33 never executed
    %%%%%:   48-block 17
branch 34 never executed
branch 35 never executed
    %%%%%:   48-block 18
branch 36 never executed
branch 37 never executed
    %%%%%:   48-block 19
branch 38 never executed
branch 39 never executed
    %%%%%:   48-block 20
branch 40 never executed
branch 41 never executed
    %%%%%:   48-block 21
    %%%%%:   48-block 22
branch 42 never executed
branch 43 never executed
    %%%%%:   48-block 23
branch 44 never executed
branch 45 never executed
    %%%%%:   48-block 24
branch 46 never executed
branch 47 never executed
    %%%%%:   48-block 25
branch 48 never executed
branch 49 never executed
    %%%%%:   48-block 26
branch 50 never executed
branch 51 never executed
    %%%%%:   48-block 27
branch 52 never executed
branch 53 never executed
    %%%%%:   48-block 28
branch 54 never executed
branch 55 never executed
    %%%%%:   48-block 29
branch 56 never executed
branch 57 never executed
    %%%%%:   48-block 30
branch 58 never executed
branch 59 never executed
    %%%%%:   48-block 31
branch 60 never executed
branch 61 never executed
    %%%%%:   48-block 32
branch 62 never executed
branch 63 never executed
    %%%%%:   48-block 33
branch 64 never executed
branch 65 never executed
    %%%%%:   48-block 34
branch 66 never executed
branch 67 never executed
    %%%%%:   48-block 35
branch 68 never executed
branch 69 never executed
    %%%%%:   48-block 36
branch 70 never executed
branch 71 never executed
        -:   49:    }
        -:   50:
        -:   51:
        -:   52:    static constexpr std::array<uint8_t, 64> BitScanTable = {
        -:   53:            0, 47,  1, 56, 48, 27,  2, 60,
        -:   54:            57, 49, 41, 37, 28, 16,  3, 61,
        -:   55:            54, 58, 35, 52, 50, 42, 21, 44,
        -:   56:            38, 32, 29, 23, 17, 11,  4, 62,
        -:   57:            46, 55, 26, 59, 40, 36, 15, 53,
        -:   58:            34, 51, 20, 43, 31, 22, 10, 45,
        -:   59:            25, 39, 14, 33, 19, 30,  9, 24,
        -:   60:            13, 18,  8, 12,  7,  6,  5, 63
        -:   61:    };
        -:   62:
        -:   63:
    #####:   64:    static constexpr uint8_t bsf(Bitboard bb) {
        -:   65:        /* Не используется специальные инструкции процессора для переносимости скомпилированного кода.
        -:   66:         * Тесты показали, что BSFR инструкции у Intel не дают ощутимой производительности по сравнению с оптимизированным подходом.
        -:   67:         * Ниже оставлен код, позволяющий использовать BSFR инструкции (при наличии).*/
        -:   68:
        -:   69:        // return __builtin_ctzll(bb);
        -:   70:
    #####:   71:        return BitboardOperations::BitScanTable[((bb ^ (bb - 1)) * 0x03f79d71b4cb0a89) >> 58];
    %%%%%:   71-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   71-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:   71-block  2
branch  4 never executed
branch  5 never executed
    %%%%%:   71-block  3
branch  6 never executed
branch  7 never executed
    %%%%%:   71-block  4
branch  8 never executed
branch  9 never executed
    %%%%%:   71-block  5
call   10 never executed
    %%%%%:   71-block  6
call   11 never executed
    %%%%%:   71-block  7
call   12 never executed
    %%%%%:   71-block  8
call   13 never executed
    %%%%%:   71-block  9
call   14 never executed
    %%%%%:   71-block 10
call   15 never executed
    %%%%%:   71-block 11
call   16 never executed
    %%%%%:   71-block 12
call   17 never executed
        -:   72:    }
        -:   73:    static constexpr uint8_t bsr(Bitboard bb) {
        -:   74:        // См. комментарий к функции выше.
        -:   75:
        -:   76:        // return 63 - __builtin_clzll(bb);
        -:   77:
        -:   78:        bb = bb | (bb >> 1);
        -:   79:        bb = bb | (bb >> 2);
        -:   80:        bb = bb | (bb >> 4);
        -:   81:        bb = bb | (bb >> 8);
        -:   82:        bb = bb | (bb >> 16);
        -:   83:        bb = bb | (bb >> 32);
        -:   84:
        -:   85:        return BitboardOperations::BitScanTable[(bb * 0x03f79d71b4cb0a89) >> 58];
        -:   86:    }
        -:   87:}
        -:   88:
        -:   89:
        -:   90:namespace BitboardRows {
        -:   91:    static constexpr std::array<Bitboard, 8> calc_rows() {
        -:   92:        std::array<Bitboard, 8> rows{};
        -:   93:
        -:   94:        for (uint8_t y = 0; y < 8; y = y + 1) {
        -:   95:            for (uint8_t x = 0; x < 8; x = x + 1) BitboardOperations::set_1(rows[y], y * 8 + x);
        -:   96:        }
        -:   97:
        -:   98:        return rows;
        -:   99:    }
        -:  100:
        -:  101:
        -:  102:    static constexpr std::array<Bitboard, 8> Rows = BitboardRows::calc_rows();
        -:  103:
        -:  104:
        -:  105:    static constexpr std::array<Bitboard, 8> calc_inversion_rows() {
        -:  106:        std::array<Bitboard, 8> inversion_rows{};
        -:  107:
        -:  108:        for (uint8_t i = 0; i < 8; i = i + 1) inversion_rows[i] = ~Rows[i];
        -:  109:
        -:  110:        return inversion_rows;
        -:  111:    }
        -:  112:
        -:  113:
        -:  114:    static constexpr std::array<Bitboard, 8> InversionRows = BitboardRows::calc_inversion_rows();
        -:  115:}
        -:  116:
        -:  117:
        -:  118:namespace BitboardColumns {
        -:  119:    static constexpr std::array<Bitboard, 8> calc_columns() {
        -:  120:        std::array<Bitboard, 8> columns{};
        -:  121:
        -:  122:        for (uint8_t x = 0; x < 8; x = x + 1) {
        -:  123:            for (uint8_t y = 0; y < 8; y = y + 1) BitboardOperations::set_1(columns[x], y * 8 + x);
        -:  124:        }
        -:  125:
        -:  126:        return columns;
        -:  127:    }
        -:  128:
        -:  129:
        -:  130:    static constexpr std::array<Bitboard, 8> Columns = BitboardColumns::calc_columns();
        -:  131:
        -:  132:
        -:  133:    static constexpr std::array<Bitboard, 8> calc_inversion_columns() {
        -:  134:        std::array<Bitboard, 8> inversion_columns{};
        -:  135:
        -:  136:        for (uint8_t i = 0; i < 8; i = i + 1) inversion_columns[i] = ~Columns[i];
        -:  137:
        -:  138:        return inversion_columns;
        -:  139:    }
        -:  140:
        -:  141:
        -:  142:    static constexpr std::array<Bitboard, 8> InversionColumns = BitboardColumns::calc_inversion_columns();
        -:  143:}
